#include "Macros/SystemMacros.h"
#include "CoadjutorSystem/CoadjutorInterrupt.h"
#include "Errors/SystemErrors.h"
#include "Managers/ThreadManager.h"
#include "Time/SystemTime.h"
#include "Com/SystemUART.h"
#include "Com/SystemTWI.h"
#include "Memory/SystemEEPROM.h"
#include "Memory/SystemSRAM.h"
#include "Peripherals/SystemPeriphreals.h"
#include "DataTypes/SystemTypes.h"

/*
   Sistema:
   - Desenvolvido sistema de Threads;
   - Desenvolvido ThreadManager;
   - ThreadStack automatizada;
   - Configurações de Sistema adicionadas;
   - ThreadManager e Threads remodelados;

   Periféricos:
    - Desenvolvidas Funções básicas de Tempo;
    - Desenvolvidas Funções básicas de Comunicação serial;
    - Desenvolvidas Funções básicas de Protocolo I2C;
    - Desenvolvidas Funções básicas de EEPROM;
    - Desenvolvidas Funções de Leitura analógica;

   Tipos:
    - Desenvolvido tipo de dado String;
    - Desenvolvido tipo de dado Vector;
    - Desenvolvido tipo de dado Duet;
    - Desenvolvido tipo de dado LIFO;
    - Desenvolvido tipo de dado FIFO;

   EEPROM:
    - Desenvolvido funções WriteString, ReadString e outras para controle de memória.
    - Adicionado funções para escrita de dados primitivos maiores de 1 byte.
    - Otimizado funções da EEPROM;

   RAM:
    - Desenvolvido classe para monitorar consumo da RAM;
    - Adicionado metodo para vizualizar stackFrame;

   Afazeres:
    Sistema:
     - Organizar software no geral;
     - Desenvolver gerenciador de memória;
     - Desenvolver programação por eventos de hardware;
     - Desenvolver Sistema de erros com stack trace;


    Tipos:
    - Desenvolver tipo Typeof;
     - Desenvolver tipo Tuple;
     - Desenvolver tipo de dado Array;
     - Desenvolver tipo de dado List;
     - Desenvolver tipo de dado Map;
     - Desenvolver tipo de dado Bitset;
     - Desenvolver tipo de dado UniqueSet;

    EEPROM:
     - Otimizar sistema de Get partições;
     - Desenvolver sistema de partições;
     - Arrumar biblioteca de partições;

    String:
     - Desenvolver um formatador de strings;

    Serial:
     - Desenvolver StackBuffer Serial;

    I2C:
     - Otimizar Funções de I2C, adicionando verificações contra erros e buffers virtuais;

    PWM:
     - Desenvolver Funções de PWM;

    Interrupções:
     - Adicionar mais funções para configurar interrupções;

*/

using namespace System;
using namespace Memory;
using namespace Data;

#define HEIGHT 64
#define WIDTH 128
void dspBegin(void);
void Flush();
void drawPixel(int x, int y);
void fakeDisplay(unsigned char *arr);

System::Managers::ThreadManager Manager;
System::Com::UART Serial;
System::Com::TWI I2C;
System::GPIO Hardware;
System::Time Clock;
System::Memory::EEPROM eeprom;
System::Memory::RAM ram;

unsigned char array[1024] = {0};

int main(void)
{
  Clock.Begin();
  I2C.Begin(40E4);
  Serial.Begin(9600);

  // dspBegin();
  // drawPixel(23, 42);
  // Flush();

  fakeDisplay(array);

  while (1)
  {
  }
  return 0;
}

#define __DSP_ADDR 0x78
#define __SET_DISPLAY_OFF 0xAE
#define __SET_DISPLAY_ON 0xAF
#define __SET_DISPLAY_CLK 0xD5
#define __SET_MULTIPLEX_RADIO 0xA8
#define __SET_DISPLAY_OFFSET 0xD3
#define __SET_START_LINE 0x40
#define __MEMORY_ADDRESSING_MODE 0x20
#define __HORIZONTAL_MODE 0x00
#define __DISPLAY_OFF 0xAE
#define __DISPLAY_ON 0xAF

#define __DATA_STREAM 0x40
#define __SINGLE_DATA_BYTE 0xC0
#define __CMD_STREAM 0x00
#define __SINGLE_CMD_BYTE 0x80

void dspBegin()
{
  Clock.Pause(101);
  I2C.Start();
  I2C.Write((__DSP_ADDR & __TWI_ADDR_MASK) | __TWI_WRITE);
  I2C.Write(0x00); // Command stream
  I2C.Write(0xAE); // Set display Off
  I2C.Write(0xD5); // Set display clock divide ratio/oscillator frequency
  I2C.Write(0x80);
  I2C.Write(0xA8); // Set multiplex ratio
  I2C.Write(0x3F);
  I2C.Write(0xD3); // Set display offset
  I2C.Write(0x00);
  I2C.Write(0x40); // Set display start line
  I2C.Write(0x8D); // Set charge pump
  I2C.Write(0x14); // VCC generated by internal DC/DC circuit
  I2C.Write(0xA1); // Set segment re-map
  I2C.Write(0xC0); // Set COM output scan direction
  I2C.Write(0xDA); // Set COM pins hardware configuration
  I2C.Write(0x12);
  I2C.Write(0x81); // Set contrast control
  I2C.Write(0xCF);
  I2C.Write(0xD9); // Set pre-changed period
  I2C.Write(0xF1);
  I2C.Write(0xDB); // Set VCOMH Deselected level
  I2C.Write(0x40);
  I2C.Write(0xA4); // Set entire display on/off
  I2C.Write(0xA6); // Set normal display
  I2C.Write(0x20); // Set memory address mode
  I2C.Write(0x00); // Horizontal
  I2C.Write(0xAF); // Set display on
  I2C.Stop();
}

/*
  I2C.Write(0x3D);
  I2C.Write(__CMD_STREAM);
  I2C.Write(__DISPLAY_OFF);
  I2C.Write(__MEMORY_ADDRESSING_MODE);
  I2C.Write(__HORIZONTAL_MODE);
  I2C.Write(__DISPLAY_ON);*/

void drawPixel(int x, int y)
{
  if ((x < 0) || (x >= WIDTH) || (y < 0) || (y >= HEIGHT))
    return;

  array[x + (y / 8) * WIDTH] |= _BV((y % 8)); // Store pixel in array
}

void Flush()
{
  I2C.Start();                                             //                  1024
  I2C.Write((__DSP_ADDR & __TWI_ADDR_MASK) | __TWI_WRITE); // Start communication with slave
  I2C.Write(0x00);                                         // Command stream
  I2C.Write(0x00);                                         // Set lower column start address for page addressing mode
  I2C.Write(0x10);                                         // Set higher column start address for page addressing mode
  I2C.Write(0x40);                                         // Set display start line
  I2C.Stop();                                              // End communication with slave

  for (unsigned int q = 0; q < (WIDTH * HEIGHT / 8); q++)
  {
    I2C.Start();
    I2C.Write((__DSP_ADDR & __TWI_ADDR_MASK) | __TWI_WRITE); // Start communication with slave
    I2C.Write(0x40);                                         // Data stream
    for (unsigned char w = 0; w < 16; w++)
    {
      I2C.Write(array[q]); // Transmit data to be displayed
      q++;
    }
    q--;
    I2C.Stop(); // End communication with slave
  }
}

void fakeDisplay(unsigned char *arr)
{
  unsigned int x = 4, y = 4;
   
  4 * 4 = 16;

  __SET(arr[0], x * 128);

  for (unsigned int i = 0; i < 64; i++)
  {
    for (unsigned int j = 0; j < 16; j++)
    {
      for (unsigned int b = 0; b < 8; b++)
      {
        Serial << (__CHECK(arr[i], b) == 0 ? '.' : '@');
      }
    }
    Serial << endl;
  }
}